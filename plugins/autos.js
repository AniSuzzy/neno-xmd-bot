const fs = require("fs");
const path = require("path");
const schedule = require("node-schedule");
const axios = require("axios");

let autoStatusJob = null;
let autoStatusEnabled = false;

// 7 Days Config
const weeklyStatus = [
    { img: "https://files.catbox.moe/6ypgeq.jpg", caption: "üåû Good Morning - Day 1-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/v8wwbb.jpg", caption: "üî• Keep Going Strong - Day 2-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/4b3lfz.jpg", caption: "üí° New Ideas Everyday - Day 3-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/3hmb56.jpg", caption: "üí™ Stay Motivated - Day 4-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/u9d0qw.jpg", caption: "üéØ Focus & Win - Day 5-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/8czv6j.jpg", caption: "üåà Spread Positivity - Day 6-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" },
    { img: "https://files.catbox.moe/5elx7r.jpg", caption: "üöÄ Ready for Next Week - Day 7-: ùöÜùô∏ùöÉùô∑ ùôΩùô¥ùôΩùôæ ùöáùôºùô≥" }
];

module.exports = async (malvin, mek, text, isOwner) => {
    const command = text?.trim().toLowerCase();

    if (isOwner && command === ".autos on") {
        if (autoStatusEnabled) return malvin.sendMessage(mek.key.remoteJid, { text: "‚úÖ Auto Status ‡∂Ø‡∑ê‡∂±‡∑ä‡∂∏ ON ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è" });
        
        autoStatusEnabled = true;
        if (autoStatusJob) autoStatusJob.cancel(); // prevent duplicates
        startAutoStatus(malvin);

        // ‡∂ú‡∂∏‡∂±‡∑ä‡∂∏ ‡∂¥‡∑Ö‡∑Ä‡∑ô‡∂±‡∑í status ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±
        await sendTodayStatus(malvin);

        return malvin.sendMessage(mek.key.remoteJid, { text: "‚úÖ Auto Status ‡∂Ø‡∑ê‡∂±‡∑ä ON ‡∂ö‡∑Ö‡∑è" });
    }

    if (isOwner && command === ".autos off") {
        if (!autoStatusEnabled) return malvin.sendMessage(mek.key.remoteJid, { text: "‚úÖ Auto Status ‡∂Ø‡∑ê‡∂±‡∑ä‡∂∏ OFF ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è" });
        
        autoStatusEnabled = false;
        if (autoStatusJob) autoStatusJob.cancel();
        return malvin.sendMessage(mek.key.remoteJid, { text: "‚ùå Auto Status ‡∂±‡∑Ä‡∂≠‡∑ä‡∂≠‡∂Ω‡∑è" });
    }
};

// Scheduler start
function startAutoStatus(malvin) {
    autoStatusJob = schedule.scheduleJob("0 9 * * *", async () => {
        if (!autoStatusEnabled) return;
        await sendTodayStatus(malvin);
    });
    console.log("‚úÖ Auto Status Scheduler Start ‡∂ö‡∑Ö‡∑è");
}

// ‡∂Ö‡∂Ø ‡∂Ø‡∑Ä‡∑É‡∑ä status ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±
async function sendTodayStatus(malvin) {
    const today = new Date();
    const dayIndex = (today.getDay() + 6) % 7; // Monday=0
    const { img, caption } = weeklyStatus[dayIndex];

    try {
        let buffer;
        if (img.startsWith("http")) {
            const res = await axios.get(img, { responseType: "arraybuffer" });
            buffer = res.data;
        } else {
            const filePath = path.resolve(__dirname, img);
            if (!fs.existsSync(filePath)) throw new Error(`File not found: ${filePath}`);
            buffer = fs.readFileSync(filePath);
        }

        await malvin.sendMessage("status@broadcast", { image: buffer, caption });
        console.log(`‚úÖ Status sent for Day ${dayIndex + 1}`);
    } catch (err) {
        console.error("‚ùå Status ‡∂∫‡∑Ä‡∂±‡∑ä‡∂± fail:", err.message);
    }
}